// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Person.proto

#ifndef PROTOBUF_Person_2eproto__INCLUDED
#define PROTOBUF_Person_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Address.pb.h"
// @@protoc_insertion_point(includes)
namespace Erbing {
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
}  // namespace Erbing

namespace Erbing {

namespace protobuf_Person_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Person_2eproto

enum Color {
  Red = 0,
  Green = 5,
  Yellow = 6,
  Blue = 9,
  Color_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Color_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Color_IsValid(int value);
const Color Color_MIN = Red;
const Color Color_MAX = Blue;
const int Color_ARRAYSIZE = Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* Color_descriptor();
inline const ::std::string& Color_Name(Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    Color_descriptor(), value);
}
inline bool Color_Parse(
    const ::std::string& name, Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
// ===================================================================

class Person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Erbing.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Person* other);
  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const PROTOBUF_FINAL { return New(NULL); }

  Person* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes name = 2;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name(int index, ::std::string&& value);
  #endif
  void set_name(int index, const char* value);
  void set_name(int index, const void* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  #if LANG_CXX11
  void add_name(::std::string&& value);
  #endif
  void add_name(const char* value);
  void add_name(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // bytes sex = 3;
  void clear_sex();
  static const int kSexFieldNumber = 3;
  const ::std::string& sex() const;
  void set_sex(const ::std::string& value);
  #if LANG_CXX11
  void set_sex(::std::string&& value);
  #endif
  void set_sex(const char* value);
  void set_sex(const void* value, size_t size);
  ::std::string* mutable_sex();
  ::std::string* release_sex();
  void set_allocated_sex(::std::string* sex);

  // .Dabing.Address addr = 5;
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 5;
  const ::Dabing::Address& addr() const;
  ::Dabing::Address* mutable_addr();
  ::Dabing::Address* release_addr();
  void set_allocated_addr(::Dabing::Address* addr);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 age = 4;
  void clear_age();
  static const int kAgeFieldNumber = 4;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // .Erbing.Color color = 6;
  void clear_color();
  static const int kColorFieldNumber = 6;
  ::Erbing::Color color() const;
  void set_color(::Erbing::Color value);

  // @@protoc_insertion_point(class_scope:Erbing.Person)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::internal::ArenaStringPtr sex_;
  ::Dabing::Address* addr_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 age_;
  int color_;
  mutable int _cached_size_;
  friend struct protobuf_Person_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Person

// int32 id = 1;
inline void Person::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Person::id() const {
  // @@protoc_insertion_point(field_get:Erbing.Person.id)
  return id_;
}
inline void Person::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Erbing.Person.id)
}

// repeated bytes name = 2;
inline int Person::name_size() const {
  return name_.size();
}
inline void Person::clear_name() {
  name_.Clear();
}
inline const ::std::string& Person::name(int index) const {
  // @@protoc_insertion_point(field_get:Erbing.Person.name)
  return name_.Get(index);
}
inline ::std::string* Person::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:Erbing.Person.name)
  return name_.Mutable(index);
}
inline void Person::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Erbing.Person.name)
  name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Person::set_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Erbing.Person.name)
  name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Person::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Erbing.Person.name)
}
inline void Person::set_name(int index, const void* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Erbing.Person.name)
}
inline ::std::string* Person::add_name() {
  // @@protoc_insertion_point(field_add_mutable:Erbing.Person.name)
  return name_.Add();
}
inline void Person::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Erbing.Person.name)
}
#if LANG_CXX11
inline void Person::add_name(::std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Erbing.Person.name)
}
#endif
inline void Person::add_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Erbing.Person.name)
}
inline void Person::add_name(const void* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Erbing.Person.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Person::name() const {
  // @@protoc_insertion_point(field_list:Erbing.Person.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Person::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:Erbing.Person.name)
  return &name_;
}

// bytes sex = 3;
inline void Person::clear_sex() {
  sex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::sex() const {
  // @@protoc_insertion_point(field_get:Erbing.Person.sex)
  return sex_.GetNoArena();
}
inline void Person::set_sex(const ::std::string& value) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Erbing.Person.sex)
}
#if LANG_CXX11
inline void Person::set_sex(::std::string&& value) {
  
  sex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Erbing.Person.sex)
}
#endif
inline void Person::set_sex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Erbing.Person.sex)
}
inline void Person::set_sex(const void* value, size_t size) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Erbing.Person.sex)
}
inline ::std::string* Person::mutable_sex() {
  
  // @@protoc_insertion_point(field_mutable:Erbing.Person.sex)
  return sex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_sex() {
  // @@protoc_insertion_point(field_release:Erbing.Person.sex)
  
  return sex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_sex(::std::string* sex) {
  if (sex != NULL) {
    
  } else {
    
  }
  sex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:Erbing.Person.sex)
}

// int32 age = 4;
inline void Person::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 Person::age() const {
  // @@protoc_insertion_point(field_get:Erbing.Person.age)
  return age_;
}
inline void Person::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:Erbing.Person.age)
}

// .Dabing.Address addr = 5;
inline bool Person::has_addr() const {
  return this != internal_default_instance() && addr_ != NULL;
}
inline void Person::clear_addr() {
  if (GetArenaNoVirtual() == NULL && addr_ != NULL) delete addr_;
  addr_ = NULL;
}
inline const ::Dabing::Address& Person::addr() const {
  const ::Dabing::Address* p = addr_;
  // @@protoc_insertion_point(field_get:Erbing.Person.addr)
  return p != NULL ? *p : *reinterpret_cast<const ::Dabing::Address*>(
      &::Dabing::_Address_default_instance_);
}
inline ::Dabing::Address* Person::mutable_addr() {
  
  if (addr_ == NULL) {
    addr_ = new ::Dabing::Address;
  }
  // @@protoc_insertion_point(field_mutable:Erbing.Person.addr)
  return addr_;
}
inline ::Dabing::Address* Person::release_addr() {
  // @@protoc_insertion_point(field_release:Erbing.Person.addr)
  
  ::Dabing::Address* temp = addr_;
  addr_ = NULL;
  return temp;
}
inline void Person::set_allocated_addr(::Dabing::Address* addr) {
  delete addr_;
  addr_ = addr;
  if (addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Erbing.Person.addr)
}

// .Erbing.Color color = 6;
inline void Person::clear_color() {
  color_ = 0;
}
inline ::Erbing::Color Person::color() const {
  // @@protoc_insertion_point(field_get:Erbing.Person.color)
  return static_cast< ::Erbing::Color >(color_);
}
inline void Person::set_color(::Erbing::Color value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:Erbing.Person.color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace Erbing

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Erbing::Color> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Erbing::Color>() {
  return ::Erbing::Color_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Person_2eproto__INCLUDED
